<?php
/**
 * ManagingPushCredentialsApi
 * PHP version 5
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant HTTP API
 *
 * Voximplant HTTP API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@voximplant.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voximplant\Api;

use \Voximplant\Configuration;
use \Voximplant\ApiClient;
use \Voximplant\ApiException;
use \Voximplant\ObjectSerializer;

/**
 * ManagingPushCredentialsApi Class Doc Comment
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManagingPushCredentialsApi
{

    /**
     * API Client
     *
     * @var \Voximplant\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Voximplant\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Voximplant\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.voximplant.com/platform_api/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Voximplant\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Voximplant\ApiClient $apiClient set the API client
     *
     * @return ManagingPushCredentialsApi
     */
    public function setApiClient(\Voximplant\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addPushCredential
     *
     * 
     *
     * @param string $external_app_name The application name. (required)
     * @param string $cert_content Public and private keys in PKCS12 format. (required)
     * @param string $cert_password The secret password for private key. (required)
     * @param bool $is_dev_mode Set true for use this certificate in apple&#x60;s sandbox environment (required)
     * @param string $push_provider_name The push provider name. Available values: APPLE, APPLE_VOIP, GOOGLE. (optional)
     * @param int $push_provider_id The push provider id. (optional)
     * @param string $cert_file_name The parameter is required, when set &#x60;cert_content&#x60; as POST body. (optional)
     * @return \Voximplant\Model\AddPushCredentialAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function addPushCredential($external_app_name, $cert_content, $cert_password, $is_dev_mode, $push_provider_name = null, $push_provider_id = null, $cert_file_name = null)
    {
        list($response) = $this->addPushCredentialWithHttpInfo($external_app_name, $cert_content, $cert_password, $is_dev_mode, $push_provider_name, $push_provider_id, $cert_file_name);
        return $response;
    }

    /**
     * Operation addPushCredentialWithHttpInfo
     *
     * 
     *
     * @param string $external_app_name The application name. (required)
     * @param string $cert_content Public and private keys in PKCS12 format. (required)
     * @param string $cert_password The secret password for private key. (required)
     * @param bool $is_dev_mode Set true for use this certificate in apple&#x60;s sandbox environment (required)
     * @param string $push_provider_name The push provider name. Available values: APPLE, APPLE_VOIP, GOOGLE. (optional)
     * @param int $push_provider_id The push provider id. (optional)
     * @param string $cert_file_name The parameter is required, when set &#x60;cert_content&#x60; as POST body. (optional)
     * @return Array of \Voximplant\Model\AddPushCredentialAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function addPushCredentialWithHttpInfo($external_app_name, $cert_content, $cert_password, $is_dev_mode, $push_provider_name = null, $push_provider_id = null, $cert_file_name = null)
    {
        // verify the required parameter 'external_app_name' is set
        if ($external_app_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $external_app_name when calling addPushCredential');
        }
        // verify the required parameter 'cert_content' is set
        if ($cert_content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cert_content when calling addPushCredential');
        }
        // verify the required parameter 'cert_password' is set
        if ($cert_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cert_password when calling addPushCredential');
        }
        // verify the required parameter 'is_dev_mode' is set
        if ($is_dev_mode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $is_dev_mode when calling addPushCredential');
        }
        // parse inputs
        $resourcePath = "/AddPushCredential";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($push_provider_name !== null) {
            $formParams['push_provider_name'] = $this->apiClient->getSerializer()->toFormValue($push_provider_name);
        }
        // form params
        if ($push_provider_id !== null) {
            $formParams['push_provider_id'] = $this->apiClient->getSerializer()->toFormValue($push_provider_id);
        }
        // form params
        if ($external_app_name !== null) {
            $formParams['external_app_name'] = $this->apiClient->getSerializer()->toFormValue($external_app_name);
        }
        // form params
        if ($cert_content !== null) {
            $formParams['cert_content'] = $this->apiClient->getSerializer()->toFormValue($cert_content);
        }
        // form params
        if ($cert_file_name !== null) {
            $formParams['cert_file_name'] = $this->apiClient->getSerializer()->toFormValue($cert_file_name);
        }
        // form params
        if ($cert_password !== null) {
            $formParams['cert_password'] = $this->apiClient->getSerializer()->toFormValue($cert_password);
        }
        // form params
        if ($is_dev_mode !== null) {
            $formParams['is_dev_mode'] = $this->apiClient->getSerializer()->toFormValue($is_dev_mode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\AddPushCredentialAPIResponse',
                '/AddPushCredential'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\AddPushCredentialAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\AddPushCredentialAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation bindPushCredential
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (required)
     * @param int $application_id The application id. (required)
     * @param bool $bind Set to false for unbind. Default value is true. (optional)
     * @return \Voximplant\Model\BindPushCredentialAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function bindPushCredential($push_credential_id, $application_id, $bind = null)
    {
        list($response) = $this->bindPushCredentialWithHttpInfo($push_credential_id, $application_id, $bind);
        return $response;
    }

    /**
     * Operation bindPushCredentialWithHttpInfo
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (required)
     * @param int $application_id The application id. (required)
     * @param bool $bind Set to false for unbind. Default value is true. (optional)
     * @return Array of \Voximplant\Model\BindPushCredentialAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function bindPushCredentialWithHttpInfo($push_credential_id, $application_id, $bind = null)
    {
        // verify the required parameter 'push_credential_id' is set
        if ($push_credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $push_credential_id when calling bindPushCredential');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling bindPushCredential');
        }
        // parse inputs
        $resourcePath = "/BindPushCredential";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($push_credential_id !== null) {
            $formParams['push_credential_id'] = $this->apiClient->getSerializer()->toFormValue($push_credential_id);
        }
        // form params
        if ($application_id !== null) {
            $formParams['application_id'] = $this->apiClient->getSerializer()->toFormValue($application_id);
        }
        // form params
        if ($bind !== null) {
            $formParams['bind'] = $this->apiClient->getSerializer()->toFormValue($bind);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\BindPushCredentialAPIResponse',
                '/BindPushCredential'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\BindPushCredentialAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\BindPushCredentialAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation delPushCredential
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (required)
     * @return \Voximplant\Model\BindPushCredentialAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function delPushCredential($push_credential_id)
    {
        list($response) = $this->delPushCredentialWithHttpInfo($push_credential_id);
        return $response;
    }

    /**
     * Operation delPushCredentialWithHttpInfo
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (required)
     * @return Array of \Voximplant\Model\BindPushCredentialAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function delPushCredentialWithHttpInfo($push_credential_id)
    {
        // verify the required parameter 'push_credential_id' is set
        if ($push_credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $push_credential_id when calling delPushCredential');
        }
        // parse inputs
        $resourcePath = "/DelPushCredential";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($push_credential_id !== null) {
            $formParams['push_credential_id'] = $this->apiClient->getSerializer()->toFormValue($push_credential_id);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\BindPushCredentialAPIResponse',
                '/DelPushCredential'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\BindPushCredentialAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\BindPushCredentialAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPushCredential
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (optional)
     * @param string $push_provider_name The push provider name. Availible values: APPLE, APPLE_VOIP, GOOGLE. (optional)
     * @param int $push_provider_id The push provider id. (optional)
     * @param string $application_name The name of bound application. (optional)
     * @param int $application_id The id of bound application. (optional)
     * @param string $external_app The push provider&#x60;s application name. (optional)
     * @param bool $with_cert Set true to get the user&#x60;s certificate. (optional)
     * @return \Voximplant\Model\GetPushCredentialAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getPushCredential($push_credential_id = null, $push_provider_name = null, $push_provider_id = null, $application_name = null, $application_id = null, $external_app = null, $with_cert = null)
    {
        list($response) = $this->getPushCredentialWithHttpInfo($push_credential_id, $push_provider_name, $push_provider_id, $application_name, $application_id, $external_app, $with_cert);
        return $response;
    }

    /**
     * Operation getPushCredentialWithHttpInfo
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (optional)
     * @param string $push_provider_name The push provider name. Availible values: APPLE, APPLE_VOIP, GOOGLE. (optional)
     * @param int $push_provider_id The push provider id. (optional)
     * @param string $application_name The name of bound application. (optional)
     * @param int $application_id The id of bound application. (optional)
     * @param string $external_app The push provider&#x60;s application name. (optional)
     * @param bool $with_cert Set true to get the user&#x60;s certificate. (optional)
     * @return Array of \Voximplant\Model\GetPushCredentialAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getPushCredentialWithHttpInfo($push_credential_id = null, $push_provider_name = null, $push_provider_id = null, $application_name = null, $application_id = null, $external_app = null, $with_cert = null)
    {
        // parse inputs
        $resourcePath = "/GetPushCredential";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($push_credential_id !== null) {
            $formParams['push_credential_id'] = $this->apiClient->getSerializer()->toFormValue($push_credential_id);
        }
        // form params
        if ($push_provider_name !== null) {
            $formParams['push_provider_name'] = $this->apiClient->getSerializer()->toFormValue($push_provider_name);
        }
        // form params
        if ($push_provider_id !== null) {
            $formParams['push_provider_id'] = $this->apiClient->getSerializer()->toFormValue($push_provider_id);
        }
        // form params
        if ($application_name !== null) {
            $formParams['application_name'] = $this->apiClient->getSerializer()->toFormValue($application_name);
        }
        // form params
        if ($application_id !== null) {
            $formParams['application_id'] = $this->apiClient->getSerializer()->toFormValue($application_id);
        }
        // form params
        if ($external_app !== null) {
            $formParams['external_app'] = $this->apiClient->getSerializer()->toFormValue($external_app);
        }
        // form params
        if ($with_cert !== null) {
            $formParams['with_cert'] = $this->apiClient->getSerializer()->toFormValue($with_cert);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetPushCredentialAPIResponse',
                '/GetPushCredential'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetPushCredentialAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetPushCredentialAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setPushCredential
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (required)
     * @param string $external_app_name The application name. (required)
     * @param string $cert_content Public and private keys in PKCS12 format. (required)
     * @param string $cert_password The secret password for private key. (required)
     * @param bool $is_dev_mode Set true for use this certificate in apple&#x60;s sandbox environment (required)
     * @return \Voximplant\Model\BindPushCredentialAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function setPushCredential($push_credential_id, $external_app_name, $cert_content, $cert_password, $is_dev_mode)
    {
        list($response) = $this->setPushCredentialWithHttpInfo($push_credential_id, $external_app_name, $cert_content, $cert_password, $is_dev_mode);
        return $response;
    }

    /**
     * Operation setPushCredentialWithHttpInfo
     *
     * 
     *
     * @param int $push_credential_id The push credentials id. (required)
     * @param string $external_app_name The application name. (required)
     * @param string $cert_content Public and private keys in PKCS12 format. (required)
     * @param string $cert_password The secret password for private key. (required)
     * @param bool $is_dev_mode Set true for use this certificate in apple&#x60;s sandbox environment (required)
     * @return Array of \Voximplant\Model\BindPushCredentialAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function setPushCredentialWithHttpInfo($push_credential_id, $external_app_name, $cert_content, $cert_password, $is_dev_mode)
    {
        // verify the required parameter 'push_credential_id' is set
        if ($push_credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $push_credential_id when calling setPushCredential');
        }
        // verify the required parameter 'external_app_name' is set
        if ($external_app_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $external_app_name when calling setPushCredential');
        }
        // verify the required parameter 'cert_content' is set
        if ($cert_content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cert_content when calling setPushCredential');
        }
        // verify the required parameter 'cert_password' is set
        if ($cert_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cert_password when calling setPushCredential');
        }
        // verify the required parameter 'is_dev_mode' is set
        if ($is_dev_mode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $is_dev_mode when calling setPushCredential');
        }
        // parse inputs
        $resourcePath = "/SetPushCredential";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($push_credential_id !== null) {
            $formParams['push_credential_id'] = $this->apiClient->getSerializer()->toFormValue($push_credential_id);
        }
        // form params
        if ($external_app_name !== null) {
            $formParams['external_app_name'] = $this->apiClient->getSerializer()->toFormValue($external_app_name);
        }
        // form params
        if ($cert_content !== null) {
            $formParams['cert_content'] = $this->apiClient->getSerializer()->toFormValue($cert_content);
        }
        // form params
        if ($cert_password !== null) {
            $formParams['cert_password'] = $this->apiClient->getSerializer()->toFormValue($cert_password);
        }
        // form params
        if ($is_dev_mode !== null) {
            $formParams['is_dev_mode'] = $this->apiClient->getSerializer()->toFormValue($is_dev_mode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\BindPushCredentialAPIResponse',
                '/SetPushCredential'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\BindPushCredentialAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\BindPushCredentialAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
