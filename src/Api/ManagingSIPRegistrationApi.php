<?php
/**
 * ManagingSIPRegistrationApi
 * PHP version 5
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant HTTP API
 *
 * Voximplant HTTP API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@voximplant.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voximplant\Api;

use \Voximplant\Configuration;
use \Voximplant\ApiClient;
use \Voximplant\ApiException;
use \Voximplant\ObjectSerializer;

/**
 * ManagingSIPRegistrationApi Class Doc Comment
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManagingSIPRegistrationApi
{

    /**
     * API Client
     *
     * @var \Voximplant\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Voximplant\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Voximplant\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.voximplant.com/platform_api/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Voximplant\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Voximplant\ApiClient $apiClient set the API client
     *
     * @return ManagingSIPRegistrationApi
     */
    public function setApiClient(\Voximplant\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation bindSipRegistration
     *
     * 
     *
     * @param float $sip_registration_id The registration ID (required)
     * @param float $application_id The application ID. (optional)
     * @param string $application_name The application name that can be used instead of &lt;b&gt;application_id&lt;/b&gt;. (optional)
     * @param float $rule_id The rule ID. (optional)
     * @param string $rule_name The rule name that can be used instead of &lt;b&gt;rule_id&lt;/b&gt;. (optional)
     * @param bool $bind Bind or unbind? (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function bindSipRegistration($sip_registration_id, $application_id = null, $application_name = null, $rule_id = null, $rule_name = null, $bind = null)
    {
        list($response) = $this->bindSipRegistrationWithHttpInfo($sip_registration_id, $application_id, $application_name, $rule_id, $rule_name, $bind);
        return $response;
    }

    /**
     * Operation bindSipRegistrationWithHttpInfo
     *
     * 
     *
     * @param float $sip_registration_id The registration ID (required)
     * @param float $application_id The application ID. (optional)
     * @param string $application_name The application name that can be used instead of &lt;b&gt;application_id&lt;/b&gt;. (optional)
     * @param float $rule_id The rule ID. (optional)
     * @param string $rule_name The rule name that can be used instead of &lt;b&gt;rule_id&lt;/b&gt;. (optional)
     * @param bool $bind Bind or unbind? (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function bindSipRegistrationWithHttpInfo($sip_registration_id, $application_id = null, $application_name = null, $rule_id = null, $rule_name = null, $bind = null)
    {
        // verify the required parameter 'sip_registration_id' is set
        if ($sip_registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sip_registration_id when calling bindSipRegistration');
        }
        // parse inputs
        $resourcePath = "/BindSipRegistration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sip_registration_id !== null) {
            $formParams['sip_registration_id'] = $this->apiClient->getSerializer()->toFormValue($sip_registration_id);
        }
        // form params
        if ($application_id !== null) {
            $formParams['application_id'] = $this->apiClient->getSerializer()->toFormValue($application_id);
        }
        // form params
        if ($application_name !== null) {
            $formParams['application_name'] = $this->apiClient->getSerializer()->toFormValue($application_name);
        }
        // form params
        if ($rule_id !== null) {
            $formParams['rule_id'] = $this->apiClient->getSerializer()->toFormValue($rule_id);
        }
        // form params
        if ($rule_name !== null) {
            $formParams['rule_name'] = $this->apiClient->getSerializer()->toFormValue($rule_name);
        }
        // form params
        if ($bind !== null) {
            $formParams['bind'] = $this->apiClient->getSerializer()->toFormValue($bind);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/BindSipRegistration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSipRegistration
     *
     * 
     *
     * @param string $username The user name. (required)
     * @param string $proxy The SIP proxy (required)
     * @param string $auth_user The SIP authentications user (optional)
     * @param string $outbound_proxy The outbound SIP proxy (optional)
     * @param string $password The SIP password (optional)
     * @return \Voximplant\Model\CreateSipRegistrationAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function createSipRegistration($username, $proxy, $auth_user = null, $outbound_proxy = null, $password = null)
    {
        list($response) = $this->createSipRegistrationWithHttpInfo($username, $proxy, $auth_user, $outbound_proxy, $password);
        return $response;
    }

    /**
     * Operation createSipRegistrationWithHttpInfo
     *
     * 
     *
     * @param string $username The user name. (required)
     * @param string $proxy The SIP proxy (required)
     * @param string $auth_user The SIP authentications user (optional)
     * @param string $outbound_proxy The outbound SIP proxy (optional)
     * @param string $password The SIP password (optional)
     * @return Array of \Voximplant\Model\CreateSipRegistrationAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function createSipRegistrationWithHttpInfo($username, $proxy, $auth_user = null, $outbound_proxy = null, $password = null)
    {
        // verify the required parameter 'username' is set
        if ($username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling createSipRegistration');
        }
        // verify the required parameter 'proxy' is set
        if ($proxy === null) {
            throw new \InvalidArgumentException('Missing the required parameter $proxy when calling createSipRegistration');
        }
        // parse inputs
        $resourcePath = "/CreateSipRegistration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($proxy !== null) {
            $formParams['proxy'] = $this->apiClient->getSerializer()->toFormValue($proxy);
        }
        // form params
        if ($auth_user !== null) {
            $formParams['auth_user'] = $this->apiClient->getSerializer()->toFormValue($auth_user);
        }
        // form params
        if ($outbound_proxy !== null) {
            $formParams['outbound_proxy'] = $this->apiClient->getSerializer()->toFormValue($outbound_proxy);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\CreateSipRegistrationAPIResponse',
                '/CreateSipRegistration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\CreateSipRegistrationAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\CreateSipRegistrationAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSipRegistration
     *
     * 
     *
     * @param float $sip_registration_id The registration ID (required)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function deleteSipRegistration($sip_registration_id)
    {
        list($response) = $this->deleteSipRegistrationWithHttpInfo($sip_registration_id);
        return $response;
    }

    /**
     * Operation deleteSipRegistrationWithHttpInfo
     *
     * 
     *
     * @param float $sip_registration_id The registration ID (required)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function deleteSipRegistrationWithHttpInfo($sip_registration_id)
    {
        // verify the required parameter 'sip_registration_id' is set
        if ($sip_registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sip_registration_id when calling deleteSipRegistration');
        }
        // parse inputs
        $resourcePath = "/DeleteSipRegistration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sip_registration_id !== null) {
            $formParams['sip_registration_id'] = $this->apiClient->getSerializer()->toFormValue($sip_registration_id);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/DeleteSipRegistration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSipRegistrations
     *
     * 
     *
     * @param float $sip_registration_id The SIP registration ID. (optional)
     * @param string $username The SIP user name to filter. (optional)
     * @param bool $deactivated Set true to show the frozen SIP registrations only. (optional)
     * @return \Voximplant\Model\GetSipRegistrationsAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getSipRegistrations($sip_registration_id = null, $username = null, $deactivated = null)
    {
        list($response) = $this->getSipRegistrationsWithHttpInfo($sip_registration_id, $username, $deactivated);
        return $response;
    }

    /**
     * Operation getSipRegistrationsWithHttpInfo
     *
     * 
     *
     * @param float $sip_registration_id The SIP registration ID. (optional)
     * @param string $username The SIP user name to filter. (optional)
     * @param bool $deactivated Set true to show the frozen SIP registrations only. (optional)
     * @return Array of \Voximplant\Model\GetSipRegistrationsAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getSipRegistrationsWithHttpInfo($sip_registration_id = null, $username = null, $deactivated = null)
    {
        // parse inputs
        $resourcePath = "/GetSipRegistrations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sip_registration_id !== null) {
            $formParams['sip_registration_id'] = $this->apiClient->getSerializer()->toFormValue($sip_registration_id);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($deactivated !== null) {
            $formParams['deactivated'] = $this->apiClient->getSerializer()->toFormValue($deactivated);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetSipRegistrationsAPIResponse',
                '/GetSipRegistrations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetSipRegistrationsAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetSipRegistrationsAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSipRegistration
     *
     * 
     *
     * @param float $sip_registration_id The registration ID (required)
     * @param string $username The user name. (required)
     * @param string $proxy The SIP proxy (required)
     * @param string $auth_user The SIP authentications user (optional)
     * @param string $outbound_proxy The outbound SIP proxy (optional)
     * @param string $password The SIP password (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function updateSipRegistration($sip_registration_id, $username, $proxy, $auth_user = null, $outbound_proxy = null, $password = null)
    {
        list($response) = $this->updateSipRegistrationWithHttpInfo($sip_registration_id, $username, $proxy, $auth_user, $outbound_proxy, $password);
        return $response;
    }

    /**
     * Operation updateSipRegistrationWithHttpInfo
     *
     * 
     *
     * @param float $sip_registration_id The registration ID (required)
     * @param string $username The user name. (required)
     * @param string $proxy The SIP proxy (required)
     * @param string $auth_user The SIP authentications user (optional)
     * @param string $outbound_proxy The outbound SIP proxy (optional)
     * @param string $password The SIP password (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function updateSipRegistrationWithHttpInfo($sip_registration_id, $username, $proxy, $auth_user = null, $outbound_proxy = null, $password = null)
    {
        // verify the required parameter 'sip_registration_id' is set
        if ($sip_registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sip_registration_id when calling updateSipRegistration');
        }
        // verify the required parameter 'username' is set
        if ($username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling updateSipRegistration');
        }
        // verify the required parameter 'proxy' is set
        if ($proxy === null) {
            throw new \InvalidArgumentException('Missing the required parameter $proxy when calling updateSipRegistration');
        }
        // parse inputs
        $resourcePath = "/UpdateSipRegistration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sip_registration_id !== null) {
            $formParams['sip_registration_id'] = $this->apiClient->getSerializer()->toFormValue($sip_registration_id);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($proxy !== null) {
            $formParams['proxy'] = $this->apiClient->getSerializer()->toFormValue($proxy);
        }
        // form params
        if ($auth_user !== null) {
            $formParams['auth_user'] = $this->apiClient->getSerializer()->toFormValue($auth_user);
        }
        // form params
        if ($outbound_proxy !== null) {
            $formParams['outbound_proxy'] = $this->apiClient->getSerializer()->toFormValue($outbound_proxy);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/UpdateSipRegistration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
