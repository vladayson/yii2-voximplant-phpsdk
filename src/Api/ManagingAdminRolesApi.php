<?php
/**
 * ManagingAdminRolesApi
 * PHP version 5
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant HTTP API
 *
 * Voximplant HTTP API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@voximplant.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voximplant\Api;

use \Voximplant\Configuration;
use \Voximplant\ApiClient;
use \Voximplant\ApiException;
use \Voximplant\ObjectSerializer;

/**
 * ManagingAdminRolesApi Class Doc Comment
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManagingAdminRolesApi
{

    /**
     * API Client
     *
     * @var \Voximplant\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Voximplant\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Voximplant\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.voximplant.com/platform_api/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Voximplant\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Voximplant\ApiClient $apiClient set the API client
     *
     * @return ManagingAdminRolesApi
     */
    public function setApiClient(\Voximplant\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addAdminRole
     *
     * 
     *
     * @param string $admin_role_name The admin role name. The length must be less than 50. (required)
     * @param bool $admin_role_active The admin role enable flag. If false the allowed and denied entries have no affect. (optional)
     * @param string $like_admin_role_id The admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. The list specifies the roles from which the new role automatically copies all permissions (allowed_entries and denied_entries). (optional)
     * @param string $like_admin_role_name The admin role name that can be used instead of &lt;b&gt;like_admin_role_id&lt;/b&gt;. The name specifies a role from which the new role automatically copies all permissions (allowed_entries and denied_entries). (optional)
     * @param string $allowed_entries The list of allowed access entries separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @param string $denied_entries The list of denied access entries separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @return \Voximplant\Model\AddAdminRoleAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function addAdminRole($admin_role_name, $admin_role_active = null, $like_admin_role_id = null, $like_admin_role_name = null, $allowed_entries = null, $denied_entries = null)
    {
        list($response) = $this->addAdminRoleWithHttpInfo($admin_role_name, $admin_role_active, $like_admin_role_id, $like_admin_role_name, $allowed_entries, $denied_entries);
        return $response;
    }

    /**
     * Operation addAdminRoleWithHttpInfo
     *
     * 
     *
     * @param string $admin_role_name The admin role name. The length must be less than 50. (required)
     * @param bool $admin_role_active The admin role enable flag. If false the allowed and denied entries have no affect. (optional)
     * @param string $like_admin_role_id The admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. The list specifies the roles from which the new role automatically copies all permissions (allowed_entries and denied_entries). (optional)
     * @param string $like_admin_role_name The admin role name that can be used instead of &lt;b&gt;like_admin_role_id&lt;/b&gt;. The name specifies a role from which the new role automatically copies all permissions (allowed_entries and denied_entries). (optional)
     * @param string $allowed_entries The list of allowed access entries separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @param string $denied_entries The list of denied access entries separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @return Array of \Voximplant\Model\AddAdminRoleAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function addAdminRoleWithHttpInfo($admin_role_name, $admin_role_active = null, $like_admin_role_id = null, $like_admin_role_name = null, $allowed_entries = null, $denied_entries = null)
    {
        // verify the required parameter 'admin_role_name' is set
        if ($admin_role_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $admin_role_name when calling addAdminRole');
        }
        // parse inputs
        $resourcePath = "/AddAdminRole";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($admin_role_name !== null) {
            $formParams['admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($admin_role_name);
        }
        // form params
        if ($admin_role_active !== null) {
            $formParams['admin_role_active'] = $this->apiClient->getSerializer()->toFormValue($admin_role_active);
        }
        // form params
        if ($like_admin_role_id !== null) {
            $formParams['like_admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($like_admin_role_id);
        }
        // form params
        if ($like_admin_role_name !== null) {
            $formParams['like_admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($like_admin_role_name);
        }
        // form params
        if ($allowed_entries !== null) {
            $formParams['allowed_entries'] = $this->apiClient->getSerializer()->toFormValue($allowed_entries);
        }
        // form params
        if ($denied_entries !== null) {
            $formParams['denied_entries'] = $this->apiClient->getSerializer()->toFormValue($denied_entries);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\AddAdminRoleAPIResponse',
                '/AddAdminRole'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\AddAdminRoleAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\AddAdminRoleAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation delAdminRole
     *
     * 
     *
     * @param float $admin_role_id The admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $admin_role_name The admin role name to delete, can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function delAdminRole($admin_role_id = null, $admin_role_name = null)
    {
        list($response) = $this->delAdminRoleWithHttpInfo($admin_role_id, $admin_role_name);
        return $response;
    }

    /**
     * Operation delAdminRoleWithHttpInfo
     *
     * 
     *
     * @param float $admin_role_id The admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $admin_role_name The admin role name to delete, can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function delAdminRoleWithHttpInfo($admin_role_id = null, $admin_role_name = null)
    {
        // parse inputs
        $resourcePath = "/DelAdminRole";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($admin_role_id !== null) {
            $formParams['admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($admin_role_id);
        }
        // form params
        if ($admin_role_name !== null) {
            $formParams['admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($admin_role_name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/DelAdminRole'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAdminRoles
     *
     * 
     *
     * @param float $admin_role_id The admin role ID to filter. (optional)
     * @param string $admin_role_name The admin role name part to filter. (optional)
     * @param bool $admin_role_active The admin role active flag to filter. (optional)
     * @param bool $with_entries Set true to get the permissions. (optional)
     * @param bool $with_account_roles Set false to omit the account roles. (optional)
     * @param bool $with_parent_roles Set false to omit the parent roles. (optional)
     * @param bool $with_system_roles Set false to omit the system roles. (optional)
     * @param string $included_admin_user_id The attached admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $excluded_admin_user_id The not attached admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $full_admin_users_matching Set false to get roles with partial admin user list matching. (optional)
     * @param float $showing_admin_user_id The admin user to show in the &#x60;admin_users&#x60; field output. (optional)
     * @param float $count The max returning record count. (optional)
     * @param float $offset The record count to omit. (optional)
     * @return \Voximplant\Model\GetAdminRolesAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getAdminRoles($admin_role_id = null, $admin_role_name = null, $admin_role_active = null, $with_entries = null, $with_account_roles = null, $with_parent_roles = null, $with_system_roles = null, $included_admin_user_id = null, $excluded_admin_user_id = null, $full_admin_users_matching = null, $showing_admin_user_id = null, $count = null, $offset = null)
    {
        list($response) = $this->getAdminRolesWithHttpInfo($admin_role_id, $admin_role_name, $admin_role_active, $with_entries, $with_account_roles, $with_parent_roles, $with_system_roles, $included_admin_user_id, $excluded_admin_user_id, $full_admin_users_matching, $showing_admin_user_id, $count, $offset);
        return $response;
    }

    /**
     * Operation getAdminRolesWithHttpInfo
     *
     * 
     *
     * @param float $admin_role_id The admin role ID to filter. (optional)
     * @param string $admin_role_name The admin role name part to filter. (optional)
     * @param bool $admin_role_active The admin role active flag to filter. (optional)
     * @param bool $with_entries Set true to get the permissions. (optional)
     * @param bool $with_account_roles Set false to omit the account roles. (optional)
     * @param bool $with_parent_roles Set false to omit the parent roles. (optional)
     * @param bool $with_system_roles Set false to omit the system roles. (optional)
     * @param string $included_admin_user_id The attached admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $excluded_admin_user_id The not attached admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $full_admin_users_matching Set false to get roles with partial admin user list matching. (optional)
     * @param float $showing_admin_user_id The admin user to show in the &#x60;admin_users&#x60; field output. (optional)
     * @param float $count The max returning record count. (optional)
     * @param float $offset The record count to omit. (optional)
     * @return Array of \Voximplant\Model\GetAdminRolesAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getAdminRolesWithHttpInfo($admin_role_id = null, $admin_role_name = null, $admin_role_active = null, $with_entries = null, $with_account_roles = null, $with_parent_roles = null, $with_system_roles = null, $included_admin_user_id = null, $excluded_admin_user_id = null, $full_admin_users_matching = null, $showing_admin_user_id = null, $count = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/GetAdminRoles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($admin_role_id !== null) {
            $formParams['admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($admin_role_id);
        }
        // form params
        if ($admin_role_name !== null) {
            $formParams['admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($admin_role_name);
        }
        // form params
        if ($admin_role_active !== null) {
            $formParams['admin_role_active'] = $this->apiClient->getSerializer()->toFormValue($admin_role_active);
        }
        // form params
        if ($with_entries !== null) {
            $formParams['with_entries'] = $this->apiClient->getSerializer()->toFormValue($with_entries);
        }
        // form params
        if ($with_account_roles !== null) {
            $formParams['with_account_roles'] = $this->apiClient->getSerializer()->toFormValue($with_account_roles);
        }
        // form params
        if ($with_parent_roles !== null) {
            $formParams['with_parent_roles'] = $this->apiClient->getSerializer()->toFormValue($with_parent_roles);
        }
        // form params
        if ($with_system_roles !== null) {
            $formParams['with_system_roles'] = $this->apiClient->getSerializer()->toFormValue($with_system_roles);
        }
        // form params
        if ($included_admin_user_id !== null) {
            $formParams['included_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($included_admin_user_id);
        }
        // form params
        if ($excluded_admin_user_id !== null) {
            $formParams['excluded_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($excluded_admin_user_id);
        }
        // form params
        if ($full_admin_users_matching !== null) {
            $formParams['full_admin_users_matching'] = $this->apiClient->getSerializer()->toFormValue($full_admin_users_matching);
        }
        // form params
        if ($showing_admin_user_id !== null) {
            $formParams['showing_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($showing_admin_user_id);
        }
        // form params
        if ($count !== null) {
            $formParams['count'] = $this->apiClient->getSerializer()->toFormValue($count);
        }
        // form params
        if ($offset !== null) {
            $formParams['offset'] = $this->apiClient->getSerializer()->toFormValue($offset);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetAdminRolesAPIResponse',
                '/GetAdminRoles'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetAdminRolesAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetAdminRolesAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setAdminRoleInfo
     *
     * 
     *
     * @param float $admin_role_id The admin user to edit. (optional)
     * @param string $admin_role_name The admin role to edit, can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @param string $new_admin_role_name The new admin role name. The length must be less than 50. (optional)
     * @param bool $admin_role_active The admin role enable flag. If false the allowed and denied entries have no affect. (optional)
     * @param string $entry_modification_mode The modification mode of the permission lists (allowed_entries and denied_entries). The following values are possible: add, del, set. (optional)
     * @param string $allowed_entries The list of allowed access entry changes separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @param string $denied_entries The list of denied access entry changes separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @param string $like_admin_role_id The admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. The list specifies the roles from which the allowed_entries and denied_entries will be merged. (optional)
     * @param string $like_admin_role_name The admin role name, can be used instead of &lt;b&gt;like_admin_role_id&lt;/b&gt;. The name specifies a role from which the allowed_entries and denied_entries will be merged. (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function setAdminRoleInfo($admin_role_id = null, $admin_role_name = null, $new_admin_role_name = null, $admin_role_active = null, $entry_modification_mode = null, $allowed_entries = null, $denied_entries = null, $like_admin_role_id = null, $like_admin_role_name = null)
    {
        list($response) = $this->setAdminRoleInfoWithHttpInfo($admin_role_id, $admin_role_name, $new_admin_role_name, $admin_role_active, $entry_modification_mode, $allowed_entries, $denied_entries, $like_admin_role_id, $like_admin_role_name);
        return $response;
    }

    /**
     * Operation setAdminRoleInfoWithHttpInfo
     *
     * 
     *
     * @param float $admin_role_id The admin user to edit. (optional)
     * @param string $admin_role_name The admin role to edit, can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @param string $new_admin_role_name The new admin role name. The length must be less than 50. (optional)
     * @param bool $admin_role_active The admin role enable flag. If false the allowed and denied entries have no affect. (optional)
     * @param string $entry_modification_mode The modification mode of the permission lists (allowed_entries and denied_entries). The following values are possible: add, del, set. (optional)
     * @param string $allowed_entries The list of allowed access entry changes separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @param string $denied_entries The list of denied access entry changes separated by the &#x60;;&#x60; symbol (the API function names). (optional)
     * @param string $like_admin_role_id The admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. The list specifies the roles from which the allowed_entries and denied_entries will be merged. (optional)
     * @param string $like_admin_role_name The admin role name, can be used instead of &lt;b&gt;like_admin_role_id&lt;/b&gt;. The name specifies a role from which the allowed_entries and denied_entries will be merged. (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function setAdminRoleInfoWithHttpInfo($admin_role_id = null, $admin_role_name = null, $new_admin_role_name = null, $admin_role_active = null, $entry_modification_mode = null, $allowed_entries = null, $denied_entries = null, $like_admin_role_id = null, $like_admin_role_name = null)
    {
        // parse inputs
        $resourcePath = "/SetAdminRoleInfo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($admin_role_id !== null) {
            $formParams['admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($admin_role_id);
        }
        // form params
        if ($admin_role_name !== null) {
            $formParams['admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($admin_role_name);
        }
        // form params
        if ($new_admin_role_name !== null) {
            $formParams['new_admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($new_admin_role_name);
        }
        // form params
        if ($admin_role_active !== null) {
            $formParams['admin_role_active'] = $this->apiClient->getSerializer()->toFormValue($admin_role_active);
        }
        // form params
        if ($entry_modification_mode !== null) {
            $formParams['entry_modification_mode'] = $this->apiClient->getSerializer()->toFormValue($entry_modification_mode);
        }
        // form params
        if ($allowed_entries !== null) {
            $formParams['allowed_entries'] = $this->apiClient->getSerializer()->toFormValue($allowed_entries);
        }
        // form params
        if ($denied_entries !== null) {
            $formParams['denied_entries'] = $this->apiClient->getSerializer()->toFormValue($denied_entries);
        }
        // form params
        if ($like_admin_role_id !== null) {
            $formParams['like_admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($like_admin_role_id);
        }
        // form params
        if ($like_admin_role_name !== null) {
            $formParams['like_admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($like_admin_role_name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/SetAdminRoleInfo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
