<?php
/**
 * ManagingAdminUsersApi
 * PHP version 5
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant HTTP API
 *
 * Voximplant HTTP API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@voximplant.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voximplant\Api;

use \Voximplant\Configuration;
use \Voximplant\ApiClient;
use \Voximplant\ApiException;
use \Voximplant\ObjectSerializer;

/**
 * ManagingAdminUsersApi Class Doc Comment
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManagingAdminUsersApi
{

    /**
     * API Client
     *
     * @var \Voximplant\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Voximplant\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Voximplant\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.voximplant.com/platform_api/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Voximplant\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Voximplant\ApiClient $apiClient set the API client
     *
     * @return ManagingAdminUsersApi
     */
    public function setApiClient(\Voximplant\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addAdminUser
     *
     * 
     *
     * @param string $new_admin_user_name The admin user name. The length must be less than 50. (required)
     * @param string $admin_user_display_name The admin user display name. The length must be less than 256. (required)
     * @param string $new_admin_user_password The admin user password. The length must be at least 6 symbols. (required)
     * @param bool $admin_user_active The admin user enable flag. (optional)
     * @param string $admin_role_id The attaching admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $admin_role_name The attaching admin role name that can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @return \Voximplant\Model\AddAdminUserAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function addAdminUser($new_admin_user_name, $admin_user_display_name, $new_admin_user_password, $admin_user_active = null, $admin_role_id = null, $admin_role_name = null)
    {
        list($response) = $this->addAdminUserWithHttpInfo($new_admin_user_name, $admin_user_display_name, $new_admin_user_password, $admin_user_active, $admin_role_id, $admin_role_name);
        return $response;
    }

    /**
     * Operation addAdminUserWithHttpInfo
     *
     * 
     *
     * @param string $new_admin_user_name The admin user name. The length must be less than 50. (required)
     * @param string $admin_user_display_name The admin user display name. The length must be less than 256. (required)
     * @param string $new_admin_user_password The admin user password. The length must be at least 6 symbols. (required)
     * @param bool $admin_user_active The admin user enable flag. (optional)
     * @param string $admin_role_id The attaching admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $admin_role_name The attaching admin role name that can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @return Array of \Voximplant\Model\AddAdminUserAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function addAdminUserWithHttpInfo($new_admin_user_name, $admin_user_display_name, $new_admin_user_password, $admin_user_active = null, $admin_role_id = null, $admin_role_name = null)
    {
        // verify the required parameter 'new_admin_user_name' is set
        if ($new_admin_user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_admin_user_name when calling addAdminUser');
        }
        // verify the required parameter 'admin_user_display_name' is set
        if ($admin_user_display_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $admin_user_display_name when calling addAdminUser');
        }
        // verify the required parameter 'new_admin_user_password' is set
        if ($new_admin_user_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_admin_user_password when calling addAdminUser');
        }
        // parse inputs
        $resourcePath = "/AddAdminUser";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($new_admin_user_name !== null) {
            $formParams['new_admin_user_name'] = $this->apiClient->getSerializer()->toFormValue($new_admin_user_name);
        }
        // form params
        if ($admin_user_display_name !== null) {
            $formParams['admin_user_display_name'] = $this->apiClient->getSerializer()->toFormValue($admin_user_display_name);
        }
        // form params
        if ($new_admin_user_password !== null) {
            $formParams['new_admin_user_password'] = $this->apiClient->getSerializer()->toFormValue($new_admin_user_password);
        }
        // form params
        if ($admin_user_active !== null) {
            $formParams['admin_user_active'] = $this->apiClient->getSerializer()->toFormValue($admin_user_active);
        }
        // form params
        if ($admin_role_id !== null) {
            $formParams['admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($admin_role_id);
        }
        // form params
        if ($admin_role_name !== null) {
            $formParams['admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($admin_role_name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\AddAdminUserAPIResponse',
                '/AddAdminUser'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\AddAdminUserAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\AddAdminUserAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation attachAdminRole
     *
     * 
     *
     * @param float $required_admin_user_id The admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $required_admin_user_name The admin user name to bind, can be used instead of &lt;b&gt;required_admin_user_id&lt;/b&gt;. (optional)
     * @param float $admin_role_id The attached admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $admin_role_name The admin role name to attach, can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @param string $mode The merge mode. The following values are possible: add, del, set. (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function attachAdminRole($required_admin_user_id = null, $required_admin_user_name = null, $admin_role_id = null, $admin_role_name = null, $mode = null)
    {
        list($response) = $this->attachAdminRoleWithHttpInfo($required_admin_user_id, $required_admin_user_name, $admin_role_id, $admin_role_name, $mode);
        return $response;
    }

    /**
     * Operation attachAdminRoleWithHttpInfo
     *
     * 
     *
     * @param float $required_admin_user_id The admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $required_admin_user_name The admin user name to bind, can be used instead of &lt;b&gt;required_admin_user_id&lt;/b&gt;. (optional)
     * @param float $admin_role_id The attached admin role ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $admin_role_name The admin role name to attach, can be used instead of &lt;b&gt;admin_role_id&lt;/b&gt;. (optional)
     * @param string $mode The merge mode. The following values are possible: add, del, set. (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function attachAdminRoleWithHttpInfo($required_admin_user_id = null, $required_admin_user_name = null, $admin_role_id = null, $admin_role_name = null, $mode = null)
    {
        // parse inputs
        $resourcePath = "/AttachAdminRole";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($required_admin_user_id !== null) {
            $formParams['required_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_id);
        }
        // form params
        if ($required_admin_user_name !== null) {
            $formParams['required_admin_user_name'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_name);
        }
        // form params
        if ($admin_role_id !== null) {
            $formParams['admin_role_id'] = $this->apiClient->getSerializer()->toFormValue($admin_role_id);
        }
        // form params
        if ($admin_role_name !== null) {
            $formParams['admin_role_name'] = $this->apiClient->getSerializer()->toFormValue($admin_role_name);
        }
        // form params
        if ($mode !== null) {
            $formParams['mode'] = $this->apiClient->getSerializer()->toFormValue($mode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/AttachAdminRole'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation delAdminUser
     *
     * 
     *
     * @param float $required_admin_user_id The admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $required_admin_user_name The admin user name to delete, can be used instead of &lt;b&gt;required_admin_user_id&lt;/b&gt;. (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function delAdminUser($required_admin_user_id = null, $required_admin_user_name = null)
    {
        list($response) = $this->delAdminUserWithHttpInfo($required_admin_user_id, $required_admin_user_name);
        return $response;
    }

    /**
     * Operation delAdminUserWithHttpInfo
     *
     * 
     *
     * @param float $required_admin_user_id The admin user ID list separated by the &#x60;;&#x60; symbol or the &#x60;all&#x60; value. (optional)
     * @param string $required_admin_user_name The admin user name to delete, can be used instead of &lt;b&gt;required_admin_user_id&lt;/b&gt;. (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function delAdminUserWithHttpInfo($required_admin_user_id = null, $required_admin_user_name = null)
    {
        // parse inputs
        $resourcePath = "/DelAdminUser";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($required_admin_user_id !== null) {
            $formParams['required_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_id);
        }
        // form params
        if ($required_admin_user_name !== null) {
            $formParams['required_admin_user_name'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/DelAdminUser'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAdminUsers
     *
     * 
     *
     * @param float $required_admin_user_id The admin user ID to filter. (optional)
     * @param string $required_admin_user_name The admin user name part to filter. (optional)
     * @param string $admin_user_display_name The admin user display name part to filter. (optional)
     * @param bool $admin_user_active The admin user active flag to filter. (optional)
     * @param bool $with_roles Set true to get the attached admin roles. (optional)
     * @param bool $with_access_entries Set true to get the admin user permissions. (optional)
     * @param float $count The max returning record count. (optional)
     * @param float $offset The record count to omit. (optional)
     * @return \Voximplant\Model\GetAdminUsersAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getAdminUsers($required_admin_user_id = null, $required_admin_user_name = null, $admin_user_display_name = null, $admin_user_active = null, $with_roles = null, $with_access_entries = null, $count = null, $offset = null)
    {
        list($response) = $this->getAdminUsersWithHttpInfo($required_admin_user_id, $required_admin_user_name, $admin_user_display_name, $admin_user_active, $with_roles, $with_access_entries, $count, $offset);
        return $response;
    }

    /**
     * Operation getAdminUsersWithHttpInfo
     *
     * 
     *
     * @param float $required_admin_user_id The admin user ID to filter. (optional)
     * @param string $required_admin_user_name The admin user name part to filter. (optional)
     * @param string $admin_user_display_name The admin user display name part to filter. (optional)
     * @param bool $admin_user_active The admin user active flag to filter. (optional)
     * @param bool $with_roles Set true to get the attached admin roles. (optional)
     * @param bool $with_access_entries Set true to get the admin user permissions. (optional)
     * @param float $count The max returning record count. (optional)
     * @param float $offset The record count to omit. (optional)
     * @return Array of \Voximplant\Model\GetAdminUsersAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getAdminUsersWithHttpInfo($required_admin_user_id = null, $required_admin_user_name = null, $admin_user_display_name = null, $admin_user_active = null, $with_roles = null, $with_access_entries = null, $count = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/GetAdminUsers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($required_admin_user_id !== null) {
            $formParams['required_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_id);
        }
        // form params
        if ($required_admin_user_name !== null) {
            $formParams['required_admin_user_name'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_name);
        }
        // form params
        if ($admin_user_display_name !== null) {
            $formParams['admin_user_display_name'] = $this->apiClient->getSerializer()->toFormValue($admin_user_display_name);
        }
        // form params
        if ($admin_user_active !== null) {
            $formParams['admin_user_active'] = $this->apiClient->getSerializer()->toFormValue($admin_user_active);
        }
        // form params
        if ($with_roles !== null) {
            $formParams['with_roles'] = $this->apiClient->getSerializer()->toFormValue($with_roles);
        }
        // form params
        if ($with_access_entries !== null) {
            $formParams['with_access_entries'] = $this->apiClient->getSerializer()->toFormValue($with_access_entries);
        }
        // form params
        if ($count !== null) {
            $formParams['count'] = $this->apiClient->getSerializer()->toFormValue($count);
        }
        // form params
        if ($offset !== null) {
            $formParams['offset'] = $this->apiClient->getSerializer()->toFormValue($offset);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetAdminUsersAPIResponse',
                '/GetAdminUsers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetAdminUsersAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetAdminUsersAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setAdminUserInfo
     *
     * 
     *
     * @param float $required_admin_user_id The admin user to edit. (optional)
     * @param string $required_admin_user_name The admin user to edit, can be used instead of &lt;b&gt;required_admin_user_id&lt;/b&gt;. (optional)
     * @param string $new_admin_user_name The new admin user name. The length must be less than 50. (optional)
     * @param string $admin_user_display_name The new admin user display name. The length must be less than 256. (optional)
     * @param string $new_admin_user_password The new admin user password. The length must be at least 6 symbols. (optional)
     * @param bool $admin_user_active The admin user enable flag. (optional)
     * @return \Voximplant\Model\ActivateCallerIDAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function setAdminUserInfo($required_admin_user_id = null, $required_admin_user_name = null, $new_admin_user_name = null, $admin_user_display_name = null, $new_admin_user_password = null, $admin_user_active = null)
    {
        list($response) = $this->setAdminUserInfoWithHttpInfo($required_admin_user_id, $required_admin_user_name, $new_admin_user_name, $admin_user_display_name, $new_admin_user_password, $admin_user_active);
        return $response;
    }

    /**
     * Operation setAdminUserInfoWithHttpInfo
     *
     * 
     *
     * @param float $required_admin_user_id The admin user to edit. (optional)
     * @param string $required_admin_user_name The admin user to edit, can be used instead of &lt;b&gt;required_admin_user_id&lt;/b&gt;. (optional)
     * @param string $new_admin_user_name The new admin user name. The length must be less than 50. (optional)
     * @param string $admin_user_display_name The new admin user display name. The length must be less than 256. (optional)
     * @param string $new_admin_user_password The new admin user password. The length must be at least 6 symbols. (optional)
     * @param bool $admin_user_active The admin user enable flag. (optional)
     * @return Array of \Voximplant\Model\ActivateCallerIDAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function setAdminUserInfoWithHttpInfo($required_admin_user_id = null, $required_admin_user_name = null, $new_admin_user_name = null, $admin_user_display_name = null, $new_admin_user_password = null, $admin_user_active = null)
    {
        // parse inputs
        $resourcePath = "/SetAdminUserInfo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($required_admin_user_id !== null) {
            $formParams['required_admin_user_id'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_id);
        }
        // form params
        if ($required_admin_user_name !== null) {
            $formParams['required_admin_user_name'] = $this->apiClient->getSerializer()->toFormValue($required_admin_user_name);
        }
        // form params
        if ($new_admin_user_name !== null) {
            $formParams['new_admin_user_name'] = $this->apiClient->getSerializer()->toFormValue($new_admin_user_name);
        }
        // form params
        if ($admin_user_display_name !== null) {
            $formParams['admin_user_display_name'] = $this->apiClient->getSerializer()->toFormValue($admin_user_display_name);
        }
        // form params
        if ($new_admin_user_password !== null) {
            $formParams['new_admin_user_password'] = $this->apiClient->getSerializer()->toFormValue($new_admin_user_password);
        }
        // form params
        if ($admin_user_active !== null) {
            $formParams['admin_user_active'] = $this->apiClient->getSerializer()->toFormValue($admin_user_active);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\ActivateCallerIDAPIResponse',
                '/SetAdminUserInfo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\ActivateCallerIDAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\ActivateCallerIDAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
