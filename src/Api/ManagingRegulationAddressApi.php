<?php
/**
 * ManagingRegulationAddressApi
 * PHP version 5
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Voximplant HTTP API
 *
 * Voximplant HTTP API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@voximplant.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Voximplant\Api;

use \Voximplant\Configuration;
use \Voximplant\ApiClient;
use \Voximplant\ApiException;
use \Voximplant\ObjectSerializer;

/**
 * ManagingRegulationAddressApi Class Doc Comment
 *
 * @category Class
 * @package  Voximplant
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManagingRegulationAddressApi
{

    /**
     * API Client
     *
     * @var \Voximplant\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Voximplant\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Voximplant\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.voximplant.com/platform_api/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Voximplant\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Voximplant\ApiClient $apiClient set the API client
     *
     * @return ManagingRegulationAddressApi
     */
    public function setApiClient(\Voximplant\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createRegulationAddress
     *
     * 
     *
     * @param string $phone_category_name The phone category name. (required)
     * @param string $destination_country_code The destination country code (required)
     * @param string $proof Send as Body Request or multiform. (required)
     * @param string $phone_owner_salutation This is the salutation of the end user for the created address: MR or MS if firstName and lastName are used or COMPANY if companyName is used (required)
     * @param string $phone_owner_zip_code This is the zip code of the end user’s address. (required)
     * @param string $phone_owner_city This is the city of the end user’s address. (required)
     * @param string $phone_owner_street This is the name of the end user’s street. (required)
     * @param string $phone_owner_building_number This is the number of the building or the street number of the address. (required)
     * @param string $phone_owner_country_code The owner&#x60;s country code. Default uses destination_country_code (optional)
     * @param string $phone_region_code The phone region code (optional)
     * @param string $phone_owner_first_name This is the first name for the end user of the created address. It is a mandatory field if the salutation is MR or MS. (optional)
     * @param string $phone_owner_last_name This is the last name for the end user of the created address. It is a mandatory field if the salutation is MR or MS. (optional)
     * @param string $phone_owner_company This is the company name for the end user of the created address. It is a mandatory field if the salutation is COMPANY. (optional)
     * @param string $phone_owner_building_letter This is the building letter which can also be used for additional information on the street number. (optional)
     * @return \Voximplant\Model\CreateRegulationAddressAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function createRegulationAddress($phone_category_name, $destination_country_code, $proof, $phone_owner_salutation, $phone_owner_zip_code, $phone_owner_city, $phone_owner_street, $phone_owner_building_number, $phone_owner_country_code = null, $phone_region_code = null, $phone_owner_first_name = null, $phone_owner_last_name = null, $phone_owner_company = null, $phone_owner_building_letter = null)
    {
        list($response) = $this->createRegulationAddressWithHttpInfo($phone_category_name, $destination_country_code, $proof, $phone_owner_salutation, $phone_owner_zip_code, $phone_owner_city, $phone_owner_street, $phone_owner_building_number, $phone_owner_country_code, $phone_region_code, $phone_owner_first_name, $phone_owner_last_name, $phone_owner_company, $phone_owner_building_letter);
        return $response;
    }

    /**
     * Operation createRegulationAddressWithHttpInfo
     *
     * 
     *
     * @param string $phone_category_name The phone category name. (required)
     * @param string $destination_country_code The destination country code (required)
     * @param string $proof Send as Body Request or multiform. (required)
     * @param string $phone_owner_salutation This is the salutation of the end user for the created address: MR or MS if firstName and lastName are used or COMPANY if companyName is used (required)
     * @param string $phone_owner_zip_code This is the zip code of the end user’s address. (required)
     * @param string $phone_owner_city This is the city of the end user’s address. (required)
     * @param string $phone_owner_street This is the name of the end user’s street. (required)
     * @param string $phone_owner_building_number This is the number of the building or the street number of the address. (required)
     * @param string $phone_owner_country_code The owner&#x60;s country code. Default uses destination_country_code (optional)
     * @param string $phone_region_code The phone region code (optional)
     * @param string $phone_owner_first_name This is the first name for the end user of the created address. It is a mandatory field if the salutation is MR or MS. (optional)
     * @param string $phone_owner_last_name This is the last name for the end user of the created address. It is a mandatory field if the salutation is MR or MS. (optional)
     * @param string $phone_owner_company This is the company name for the end user of the created address. It is a mandatory field if the salutation is COMPANY. (optional)
     * @param string $phone_owner_building_letter This is the building letter which can also be used for additional information on the street number. (optional)
     * @return Array of \Voximplant\Model\CreateRegulationAddressAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function createRegulationAddressWithHttpInfo($phone_category_name, $destination_country_code, $proof, $phone_owner_salutation, $phone_owner_zip_code, $phone_owner_city, $phone_owner_street, $phone_owner_building_number, $phone_owner_country_code = null, $phone_region_code = null, $phone_owner_first_name = null, $phone_owner_last_name = null, $phone_owner_company = null, $phone_owner_building_letter = null)
    {
        // verify the required parameter 'phone_category_name' is set
        if ($phone_category_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_category_name when calling createRegulationAddress');
        }
        // verify the required parameter 'destination_country_code' is set
        if ($destination_country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_country_code when calling createRegulationAddress');
        }
        // verify the required parameter 'proof' is set
        if ($proof === null) {
            throw new \InvalidArgumentException('Missing the required parameter $proof when calling createRegulationAddress');
        }
        // verify the required parameter 'phone_owner_salutation' is set
        if ($phone_owner_salutation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_owner_salutation when calling createRegulationAddress');
        }
        // verify the required parameter 'phone_owner_zip_code' is set
        if ($phone_owner_zip_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_owner_zip_code when calling createRegulationAddress');
        }
        // verify the required parameter 'phone_owner_city' is set
        if ($phone_owner_city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_owner_city when calling createRegulationAddress');
        }
        // verify the required parameter 'phone_owner_street' is set
        if ($phone_owner_street === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_owner_street when calling createRegulationAddress');
        }
        // verify the required parameter 'phone_owner_building_number' is set
        if ($phone_owner_building_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_owner_building_number when calling createRegulationAddress');
        }
        // parse inputs
        $resourcePath = "/CreateRegulationAddress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($phone_category_name !== null) {
            $formParams['phone_category_name'] = $this->apiClient->getSerializer()->toFormValue($phone_category_name);
        }
        // form params
        if ($destination_country_code !== null) {
            $formParams['destination_country_code'] = $this->apiClient->getSerializer()->toFormValue($destination_country_code);
        }
        // form params
        if ($phone_owner_country_code !== null) {
            $formParams['phone_owner_country_code'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_country_code);
        }
        // form params
        if ($proof !== null) {
            $formParams['proof'] = $this->apiClient->getSerializer()->toFormValue($proof);
        }
        // form params
        if ($phone_region_code !== null) {
            $formParams['phone_region_code'] = $this->apiClient->getSerializer()->toFormValue($phone_region_code);
        }
        // form params
        if ($phone_owner_salutation !== null) {
            $formParams['phone_owner_salutation'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_salutation);
        }
        // form params
        if ($phone_owner_first_name !== null) {
            $formParams['phone_owner_first_name'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_first_name);
        }
        // form params
        if ($phone_owner_last_name !== null) {
            $formParams['phone_owner_last_name'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_last_name);
        }
        // form params
        if ($phone_owner_company !== null) {
            $formParams['phone_owner_company'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_company);
        }
        // form params
        if ($phone_owner_zip_code !== null) {
            $formParams['phone_owner_zip_code'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_zip_code);
        }
        // form params
        if ($phone_owner_city !== null) {
            $formParams['phone_owner_city'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_city);
        }
        // form params
        if ($phone_owner_street !== null) {
            $formParams['phone_owner_street'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_street);
        }
        // form params
        if ($phone_owner_building_number !== null) {
            $formParams['phone_owner_building_number'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_building_number);
        }
        // form params
        if ($phone_owner_building_letter !== null) {
            $formParams['phone_owner_building_letter'] = $this->apiClient->getSerializer()->toFormValue($phone_owner_building_letter);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\CreateRegulationAddressAPIResponse',
                '/CreateRegulationAddress'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\CreateRegulationAddressAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\CreateRegulationAddressAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAvailibleRegulations
     *
     * 
     *
     * @param string $country_code The country code (required)
     * @param string $phone_category_name The phone category name. (required)
     * @param string $phone_region_code The phone region code. Mandatory for regulation type LOCAL (optional)
     * @return \Voximplant\Model\GetAvailibleRegulationsAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getAvailibleRegulations($country_code, $phone_category_name, $phone_region_code = null)
    {
        list($response) = $this->getAvailibleRegulationsWithHttpInfo($country_code, $phone_category_name, $phone_region_code);
        return $response;
    }

    /**
     * Operation getAvailibleRegulationsWithHttpInfo
     *
     * 
     *
     * @param string $country_code The country code (required)
     * @param string $phone_category_name The phone category name. (required)
     * @param string $phone_region_code The phone region code. Mandatory for regulation type LOCAL (optional)
     * @return Array of \Voximplant\Model\GetAvailibleRegulationsAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getAvailibleRegulationsWithHttpInfo($country_code, $phone_category_name, $phone_region_code = null)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling getAvailibleRegulations');
        }
        // verify the required parameter 'phone_category_name' is set
        if ($phone_category_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_category_name when calling getAvailibleRegulations');
        }
        // parse inputs
        $resourcePath = "/GetAvailibleRegulations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($phone_category_name !== null) {
            $formParams['phone_category_name'] = $this->apiClient->getSerializer()->toFormValue($phone_category_name);
        }
        // form params
        if ($phone_region_code !== null) {
            $formParams['phone_region_code'] = $this->apiClient->getSerializer()->toFormValue($phone_region_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetAvailibleRegulationsAPIResponse',
                '/GetAvailibleRegulations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetAvailibleRegulationsAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetAvailibleRegulationsAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCountries
     *
     * 
     *
     * @param string $country_code The country code A2 (optional)
     * @return \Voximplant\Model\GetCountriesAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getCountries($country_code = null)
    {
        list($response) = $this->getCountriesWithHttpInfo($country_code);
        return $response;
    }

    /**
     * Operation getCountriesWithHttpInfo
     *
     * 
     *
     * @param string $country_code The country code A2 (optional)
     * @return Array of \Voximplant\Model\GetCountriesAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getCountriesWithHttpInfo($country_code = null)
    {
        // parse inputs
        $resourcePath = "/GetCountries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetCountriesAPIResponse',
                '/GetCountries'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetCountriesAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetCountriesAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegions
     *
     * 
     *
     * @param string $country_code The country code A2 (required)
     * @param string $phone_category_name The phone category name. Availible: GEOGRAPHIC, TOLL_FREE, NATIONAL, MOBILE (required)
     * @param string $city_name The pattern of city&#x60;s name (optional)
     * @param int $count The returned regions count. (optional)
     * @param int $offset The record count to omit. (optional)
     * @return \Voximplant\Model\GetRegionsAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getRegions($country_code, $phone_category_name, $city_name = null, $count = null, $offset = null)
    {
        list($response) = $this->getRegionsWithHttpInfo($country_code, $phone_category_name, $city_name, $count, $offset);
        return $response;
    }

    /**
     * Operation getRegionsWithHttpInfo
     *
     * 
     *
     * @param string $country_code The country code A2 (required)
     * @param string $phone_category_name The phone category name. Availible: GEOGRAPHIC, TOLL_FREE, NATIONAL, MOBILE (required)
     * @param string $city_name The pattern of city&#x60;s name (optional)
     * @param int $count The returned regions count. (optional)
     * @param int $offset The record count to omit. (optional)
     * @return Array of \Voximplant\Model\GetRegionsAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getRegionsWithHttpInfo($country_code, $phone_category_name, $city_name = null, $count = null, $offset = null)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling getRegions');
        }
        // verify the required parameter 'phone_category_name' is set
        if ($phone_category_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_category_name when calling getRegions');
        }
        // parse inputs
        $resourcePath = "/GetRegions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($phone_category_name !== null) {
            $formParams['phone_category_name'] = $this->apiClient->getSerializer()->toFormValue($phone_category_name);
        }
        // form params
        if ($city_name !== null) {
            $formParams['city_name'] = $this->apiClient->getSerializer()->toFormValue($city_name);
        }
        // form params
        if ($count !== null) {
            $formParams['count'] = $this->apiClient->getSerializer()->toFormValue($count);
        }
        // form params
        if ($offset !== null) {
            $formParams['offset'] = $this->apiClient->getSerializer()->toFormValue($offset);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetRegionsAPIResponse',
                '/GetRegions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetRegionsAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetRegionsAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegulationsAddress
     *
     * 
     *
     * @param string $country_code The country code (optional)
     * @param string $phone_category_name The phone category name. (optional)
     * @param string $phone_region_code The phone region code. (optional)
     * @param float $regulation_address_id The regulation address ID. (optional)
     * @param bool $verified Show only verified regulation address. (optional)
     * @param bool $in_progress Show only in progress regulation address. (optional)
     * @return \Voximplant\Model\GetRegulationsAddressAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getRegulationsAddress($country_code = null, $phone_category_name = null, $phone_region_code = null, $regulation_address_id = null, $verified = null, $in_progress = null)
    {
        list($response) = $this->getRegulationsAddressWithHttpInfo($country_code, $phone_category_name, $phone_region_code, $regulation_address_id, $verified, $in_progress);
        return $response;
    }

    /**
     * Operation getRegulationsAddressWithHttpInfo
     *
     * 
     *
     * @param string $country_code The country code (optional)
     * @param string $phone_category_name The phone category name. (optional)
     * @param string $phone_region_code The phone region code. (optional)
     * @param float $regulation_address_id The regulation address ID. (optional)
     * @param bool $verified Show only verified regulation address. (optional)
     * @param bool $in_progress Show only in progress regulation address. (optional)
     * @return Array of \Voximplant\Model\GetRegulationsAddressAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getRegulationsAddressWithHttpInfo($country_code = null, $phone_category_name = null, $phone_region_code = null, $regulation_address_id = null, $verified = null, $in_progress = null)
    {
        // parse inputs
        $resourcePath = "/GetRegulationsAddress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($phone_category_name !== null) {
            $formParams['phone_category_name'] = $this->apiClient->getSerializer()->toFormValue($phone_category_name);
        }
        // form params
        if ($phone_region_code !== null) {
            $formParams['phone_region_code'] = $this->apiClient->getSerializer()->toFormValue($phone_region_code);
        }
        // form params
        if ($regulation_address_id !== null) {
            $formParams['regulation_address_id'] = $this->apiClient->getSerializer()->toFormValue($regulation_address_id);
        }
        // form params
        if ($verified !== null) {
            $formParams['verified'] = $this->apiClient->getSerializer()->toFormValue($verified);
        }
        // form params
        if ($in_progress !== null) {
            $formParams['in_progress'] = $this->apiClient->getSerializer()->toFormValue($in_progress);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetRegulationsAddressAPIResponse',
                '/GetRegulationsAddress'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetRegulationsAddressAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetRegulationsAddressAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getZIPCodes
     *
     * 
     *
     * @param string $country_code The country code (required)
     * @param string $phone_region_code The phone region code (optional)
     * @param float $count The max returning record count. (optional)
     * @param float $offset The record count to omit. (optional)
     * @return \Voximplant\Model\GetZIPCodesAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getZIPCodes($country_code, $phone_region_code = null, $count = null, $offset = null)
    {
        list($response) = $this->getZIPCodesWithHttpInfo($country_code, $phone_region_code, $count, $offset);
        return $response;
    }

    /**
     * Operation getZIPCodesWithHttpInfo
     *
     * 
     *
     * @param string $country_code The country code (required)
     * @param string $phone_region_code The phone region code (optional)
     * @param float $count The max returning record count. (optional)
     * @param float $offset The record count to omit. (optional)
     * @return Array of \Voximplant\Model\GetZIPCodesAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function getZIPCodesWithHttpInfo($country_code, $phone_region_code = null, $count = null, $offset = null)
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling getZIPCodes');
        }
        // parse inputs
        $resourcePath = "/GetZIPCodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($phone_region_code !== null) {
            $formParams['phone_region_code'] = $this->apiClient->getSerializer()->toFormValue($phone_region_code);
        }
        // form params
        if ($count !== null) {
            $formParams['count'] = $this->apiClient->getSerializer()->toFormValue($count);
        }
        // form params
        if ($offset !== null) {
            $formParams['offset'] = $this->apiClient->getSerializer()->toFormValue($offset);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\GetZIPCodesAPIResponse',
                '/GetZIPCodes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\GetZIPCodesAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\GetZIPCodesAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation linkregulationAddress
     *
     * 
     *
     * @param float $regulation_address_id The regulation address ID (required)
     * @param float $phone_id The phone ID for link (required)
     * @param string $phone_number The phone number for link (required)
     * @return \Voximplant\Model\LinkregulationAddressAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function linkregulationAddress($regulation_address_id, $phone_id, $phone_number)
    {
        list($response) = $this->linkregulationAddressWithHttpInfo($regulation_address_id, $phone_id, $phone_number);
        return $response;
    }

    /**
     * Operation linkregulationAddressWithHttpInfo
     *
     * 
     *
     * @param float $regulation_address_id The regulation address ID (required)
     * @param float $phone_id The phone ID for link (required)
     * @param string $phone_number The phone number for link (required)
     * @return Array of \Voximplant\Model\LinkregulationAddressAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function linkregulationAddressWithHttpInfo($regulation_address_id, $phone_id, $phone_number)
    {
        // verify the required parameter 'regulation_address_id' is set
        if ($regulation_address_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regulation_address_id when calling linkregulationAddress');
        }
        // verify the required parameter 'phone_id' is set
        if ($phone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_id when calling linkregulationAddress');
        }
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone_number when calling linkregulationAddress');
        }
        // parse inputs
        $resourcePath = "/LinkregulationAddress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($regulation_address_id !== null) {
            $formParams['regulation_address_id'] = $this->apiClient->getSerializer()->toFormValue($regulation_address_id);
        }
        // form params
        if ($phone_id !== null) {
            $formParams['phone_id'] = $this->apiClient->getSerializer()->toFormValue($phone_id);
        }
        // form params
        if ($phone_number !== null) {
            $formParams['phone_number'] = $this->apiClient->getSerializer()->toFormValue($phone_number);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\LinkregulationAddressAPIResponse',
                '/LinkregulationAddress'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\LinkregulationAddressAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\LinkregulationAddressAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadProofOfAddress
     *
     * 
     *
     * @param float $regulation_address_id The regulation address id (required)
     * @param string $proof Send as Body Request or multiform. (required)
     * @return \Voximplant\Model\LinkregulationAddressAPIResponse
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function uploadProofOfAddress($regulation_address_id, $proof)
    {
        list($response) = $this->uploadProofOfAddressWithHttpInfo($regulation_address_id, $proof);
        return $response;
    }

    /**
     * Operation uploadProofOfAddressWithHttpInfo
     *
     * 
     *
     * @param float $regulation_address_id The regulation address id (required)
     * @param string $proof Send as Body Request or multiform. (required)
     * @return Array of \Voximplant\Model\LinkregulationAddressAPIResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Voximplant\ApiException on non-2xx response
     */
    public function uploadProofOfAddressWithHttpInfo($regulation_address_id, $proof)
    {
        // verify the required parameter 'regulation_address_id' is set
        if ($regulation_address_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regulation_address_id when calling uploadProofOfAddress');
        }
        // verify the required parameter 'proof' is set
        if ($proof === null) {
            throw new \InvalidArgumentException('Missing the required parameter $proof when calling uploadProofOfAddress');
        }
        // parse inputs
        $resourcePath = "/UploadProofOfAddress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($regulation_address_id !== null) {
            $formParams['regulation_address_id'] = $this->apiClient->getSerializer()->toFormValue($regulation_address_id);
        }
        // form params
        if ($proof !== null) {
            $formParams['proof'] = $this->apiClient->getSerializer()->toFormValue($proof);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('account_name');
        if (strlen($apiKey) !== 0) {
            $queryParams['account_name'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Voximplant\Model\LinkregulationAddressAPIResponse',
                '/UploadProofOfAddress'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Voximplant\Model\LinkregulationAddressAPIResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Voximplant\Model\LinkregulationAddressAPIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
